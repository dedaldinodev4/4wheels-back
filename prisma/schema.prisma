// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  username   String
  email      String    @unique
  password   String
  role       String    @default("client") // client | admin | saler
  status     Boolean   @default(true)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  Client     Client[]
  Phone      Phone[]
  Sale       Sale[]
  Vehicle    Vehicle[]

  @@map("_users")
}

model Client {
  id           String   @id @default(uuid())
  name         String
  identity     String   @unique
  address      String
  gender       String
  walletNumber String
  id_user      String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  status       Boolean  @default(true)
  user         User     @relation(fields: [id_user], references: [id])
  Sale         Sale[]
  Rental       Rental[]

  @@map("_clients")
}

model Invoice {
  id         String   @id @default(uuid())
  status     Status   @default(PENDING)
  number     String?  @unique @default("")
  type       String?
  year       String?
  id_payment String
  payment    Payment  @relation(fields: [id_payment], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Sale       Sale[]
  Rental     Rental[]

  @@map("_invoices")
}

model Payment {
  id             String      @id @default(uuid())
  amount         Decimal
  currency       String      @default("Kz") // Kz | $ 
  id_paymentType String
  status         Status      @default(PENDING)
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
  paymentType    PaymentType @relation(fields: [id_paymentType], references: [id])
  Invoice        Invoice[]

  @@map("_payments")
}

model PaymentType {
  id         String    @id @default(uuid())
  name       String
  status     Boolean   @default(true)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  Payment    Payment[]

  @@map("_payments_types")
}

model Phone {
  id         String   @id @default(uuid())
  number     String
  id_user    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [id_user], references: [id])

  @@map("_phones")
}

model Driver {
  id         String   @id @default(uuid())
  name       String
  country    String
  gender     String
  identity   String
  birth      DateTime
  breed      String?  @default("black") // black | white 
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Rental     Rental[]

  @@map("_drives")
}

model Vehicle {
  id                  String                @id @default(uuid())
  acquisition_date    DateTime
  mileage             Int
  price               Decimal
  condition           String // new | used | bad
  type                String // sale | rent
  manufacturer        String
  availability        Boolean               @default(true)
  year                Int
  id_vehicleDetail    String
  created_by          String
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  vehicleDetail       VehicleDetail         @relation(fields: [id_vehicleDetail], references: [id])
  creator             User                  @relation(fields: [created_by], references: [id])
  VehicleImageVehicle VehicleImageVehicle[]
  Sale                Sale[]
  Rental              Rental[]

  @@map("_vehicles")
}

model VehicleDetail {
  id            String    @id @default(uuid())
  brand         String
  model         String
  license_plate String
  color         String
  fuelType      String    @default("gasoline") // gasoline | gasoleo | electricity | hybrid
  cylinders     Int       @default(1)
  typeOfclass   String    @default("sport") // sport | minivan | midsize | small | subcompact | compact | large
  description   String?   @default("")
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  Vehicle       Vehicle[]

  @@map("_vehicle_details")
}

model VehicleImage {
  id                  String                @id @default(uuid())
  title               String
  path                String
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  VehicleImageVehicle VehicleImageVehicle[]

  @@map("_vehicle_images")
}

model VehicleImageVehicle {
  id              String       @id @default(uuid())
  id_vehicle      String
  id_vehicleImage String
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  vehicle         Vehicle      @relation(fields: [id_vehicle], references: [id])
  vehicleImage    VehicleImage @relation(fields: [id_vehicleImage], references: [id])

  @@map("_vehicle_image_vehicles")
}

model Sale {
  id            String   @id @default(uuid())
  id_invoice    String
  id_client     String
  id_vehicle    String
  saler_id      String
  delivery_date DateTime @db.Date
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  status        Status   @default(PENDING)
  invoice       Invoice  @relation(fields: [id_invoice], references: [id])
  vehicle       Vehicle  @relation(fields: [id_vehicle], references: [id])
  saler         User     @relation(fields: [saler_id], references: [id])
  client        Client   @relation(fields: [id_client], references: [id])

  @@map("_sales")
}

model Rental {
  id              String   @id @default(uuid())
  id_invoice      String
  id_client       String
  id_vehicle      String
  start_date      DateTime
  end_date        DateTime
  initial_mileage Int
  final_mileage   Int
  total_price     Decimal
  insurance_type  String?  @default("full") // full | basic
  id_driver       String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  status          Status   @default(ACTIVE)
  invoice         Invoice  @relation(fields: [id_invoice], references: [id])
  vehicle         Vehicle  @relation(fields: [id_vehicle], references: [id])
  client          Client   @relation(fields: [id_client], references: [id])
  driver          Driver?  @relation(fields: [id_driver], references: [id])

  @@map("_rentals")
}

enum Status {
  PENDING
  CANCELED
  DONE
  PAID
  COMPLETED
  ACTIVE
}
